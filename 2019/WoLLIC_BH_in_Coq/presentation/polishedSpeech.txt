1.

Hello. My name is Semyon.
I am here to present our results in mechanization of the formal language theory.

2.

There is quite a few systems which automate theorem proving.
They are generally used in two scenarios.
The first one is to ensure the correctness of nontrivial proofs.
Theorem proving automation is really valuable now, when most proofs are just too big and complex.
Without automation, it is really hard to guarantee, that a proof is indeed correct, and nobody, who was involved in the development of it, had made any mistakes.

One other thing proof automation is capable of is facilitation of  development of correct-by-construction algorithms.
This way, one can prove that their algorithm works as intended, extract it into their favorite executable programming language and be sure that there won't be any surprises when the program actually runs.

We are most interested in the second application.

We employ the Coq proof assistant to do the job.
It is a well known system, based on the calculus of inductive constuctions.
It provides the ability to extract executable code from a proof.

3.

Our area of research is formal language theory.
Of course, there are works which check nontrivial proofs.
At the same time, results from this area are widely used in applications such as programming languages analysis, database querying and search engines.
Some of these applications are better be secure, so there is a reason to develop certified algorithms for parsing, regular expressions manipulation and so on.

4.

In our work we focus on the Bar-Hillel theorem.
This theorem states that context-free languages are closed under the intersection with regular languages.
We prove this theorem in Coq.

But why this particular theorem?

5.

The answer is simple: "Because this theorem is important for applications".
One such application is context-free path querying.
Context-free path querying is a way to search for paths in labeled graphs.

Let me illustrate it with an example.

Consider an edge-labeled graph.
We want to find such paths in the graph which from a well-balanced sequence over the alphabet of two symbols: A and B.
In other words, we want to find paths which in turn form words of a Dyck language.

To do it, we can specify a grammar for Dyck language over A and B and use it as a filter for edges.
In our case the answer to the question is an infinite set of paths which meet the condition.

6.

From the formal standpoint, we have a context-free grammar which serves as a filter (or query).
We also have a directed edge-labeled graph, which labels are a subset of the terminals of the grammar.

Each path in the graph forms a word.
The function omega is a helper which converts the path into a word.

Now, having all the necessary definitions, we can provide some possible formal definitions of context-free path querying.

The first one is to find all pairs of vertices, such that there exists a path between them which forms a word in the given language.
It is a reachability problem.

Another possible formulation is to find all possible paths which form words in the given language.

There are many other variations of this problem. For example, it may be necessary to check for the existence of paths in the graph, or to find paths between two specified vertices.

7.

You likely have already noticed that context-free path querying and Bar-Hillel theorem are connected.

The grammar which filters paths specifies a context free language,

whereas the graph can be seen as a regular language: we only need to select the start and final states.

Notice, that in general, all vertices can be considered to be start and final, but it is not an issue, since regular languages are closed under the set-theoretic union.

Context-free path querying is indeed constructing the intersection between some context free and regular languages.

Bar-Hillel states that context-free path querying is decidable.
Keeping in mind that the intersection is context-free and emptiness of a context-free language is also decidable, path existence is decidable.

Moreover, the constructive proof of this theorem shows how to construct a representation of paths, how to get pairs of vertices, and so on.

8.

Context-free path querying is used for graph analysis in different areas.

One natural application is graph database querying.
It was introduced by Yannakakis, and is actively developed now.

Tomas Reps showed how to apply it for static code analysis.

Mechanization of the Bar-Hillel theorem is a first step in developing certified algorithms for static code analysis and database querying.

9.

In our work we use a nonconventional way to prove the theorem.
We use grammar-based proof instead of the one based on pushdown automata construction.
It is not new, but is slightly less known.

To prove the therem we do the following steps.

First of all, we only consider context-free grammars in Chomsky Normal Form, as any context-free grammar can be normalized.

Second of all, it is much easier to deal with deterministic finite automata which only have one final state.
Luckily, there is a lemma which states that any nonempty regular language can be represented as the union of the regular languages represented with a finite automaton with the single final state.

After that, we construct a grammar for the intersection of each of those regular languages with the context-free grammar in Chomsky Normal Form.

Finally, we constuct join the grammars with the union operation.

10.

We planned to reuse existing results in  mechanization of the formal language theroy.
We needed mechanization of context-free languages, regular languages and finite automata.

Initially we decided to use the results of Hofmann and Smolka, since they had relevant stuff mechanized.

Hofmann provides a set of basic defitions such as the definition of a language and grammar, but also the conversion of a context-free grammar to Chomsky Normal Form.

To actually use what was done before, we had to improve it.

One issue was that types for terminal and nonterminal symbols were defined to be natural numbers.

It didn't agree with our approach, because we had to use triples of two automaton states and a nonterminal of the original grammar for nonterminals of the constructed grammars.

We thus had to generalize the definitions for nonterminals and terminals.

And... We had to refactor everything afterwards.

After we had done that, we finished the proof of the first part: any context-free language can be described by a grammar in Chomsky Normal Form.

11.

Next, we show that a DFA can be represented as a union of DFAs with single final state.

This lemma states that the procedure split_dfa which we have encoded, indeed creates a correct splitting.

Note, that the fact that all DFAs in the splitting result contain precisely one final state is encoded at the type level.
DFAs in the set have a special type which guarantees that there is only one final state.

12.

Next steps involve Chomsky induction.
It is a structural induction on the derivation of a word.

If the given word w of length at least two is derivable from some nonterminal N, then, there exists a rule in the grammar for N, with two nonterminals in the right-hand side: N1 and N2.
There also exist two subwords w1 and w2, such that w is a concatenation of them, and each of them is derivable from the corresponding nonterminal.

13.

This inductive construction is formalized with this definition.
The original definition of the grammar does not specify its start nonterminal, so we should specify it explicitly.

Using this construction, we can construct grammars for the intersection of a normalized grammar and a automaton with a single final state.

14.

As a final step, we build a union of these grammars and prove that the procedure grammar_union does it correctly.
Namely, we prove that the procedure preserves the language.

It means that the union contains a word if and only if there exist a grammar in the set, such that it is in the language described by it.

15.

Now we are ready to state the final theorem.

It states that for every decidable type for nonterminals and terminals, if there exists a bijection between natural numbers and the type for nonterminals, and syntactic analysis in terms of our definition is possible, then for any DFA and a context free grammar, there exists a grammar which specifies the languages for the intersection.

16.

Here is the theorem in Coq.

NewNonterminal requests the type for nonterminals to be triples.
Then there exists a new grammar over original terminals and new nonterminals, and a new start nonterminal, such that it specifies a language for the intersection of the language specified by the input DFA and the grammar.

17.

To sum up, we present mechanization in Coq of the proof that context-free languages are closed under the intersection with regular languages.

We have generalized the resuls of Jana Hofmann and we believe it should be use it in other works.

Everything is published on GitHub.
Coq code is equipped with automatically generated documentation to simplify navigation through the code.

18.

The first question for future research is the integration with other results on formal language theory mechanization.
In the current work we use results of Jana Hofmann. But there is, for example, a great work by Markus Romas which seem more mature.

It is not obvious whether it would be better to use this results for our work.
Because it is not evident that we can create one general solution for every problem.
For example, one can have a case when PDA-based proof is more appropriate than our grammar-based one.
But, maybe, we should create one extensible platform for formal language theory mechanization.
I believe that it is a question for further discussion.

In any case, our result is the first step towards certification of algorithms which are based on the Bar-Hillel theorem.
Which may be helpful to ensure security in database engines.
And it is a direction for future work.

19

Thank you for attention. I'm ready to answer your questions.
