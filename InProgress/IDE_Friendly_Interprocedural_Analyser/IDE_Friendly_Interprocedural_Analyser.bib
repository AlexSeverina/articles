@article{CFLr,
 author = {Rehof, Jakob and F\"{a}hndrich, Manuel},
 title = {Type-base Flow Analysis: From Polymorphic Subtyping to CFL-reachability},
 journal = {SIGPLAN Not.},
 issue_date = {March 2001},
 volume = {36},
 number = {3},
 month = jan,
 year = {2001},
 issn = {0362-1340},
 pages = {54--66},
 numpages = {13},
 url = {http://doi.acm.org/10.1145/373243.360208},
 doi = {10.1145/373243.360208},
 acmid = {360208},
 publisher = {ACM},
 address = {New York, NY, USA},
}

@book{AutomataTheory,
 author = {Hopcroft, John E. and Ullman, Jeffrey D.},
 title = {Introduction To Automata Theory, Languages, And Computation},
 year = {1990},
 isbn = {020102988X},
 edition = {1st},
 publisher = {Addison-Wesley Longman Publishing Co., Inc.},
 address = {Boston, MA, USA},
}

@InProceedings{10.1007/978-3-319-63390-9_27,
author="Dan, Andrei Marian
and Sridharan, Manu
and Chandra, Satish
and Jeannin, Jean-Baptiste
and Vechev, Martin",
editor="Majumdar, Rupak
and Kun{\v{c}}ak, Viktor",
title="Finding Fix Locations for CFL-Reachability Analyses via Minimum Cuts",
booktitle="Computer Aided Verification",
year="2017",
publisher="Springer International Publishing",
address="Cham",
pages="521--541",
abstract="Static analysis tools are increasingly important for ensuring code quality. Ideally, all warnings from a static analysis would be addressed, but the volume of warnings and false positives usually makes this effort prohibitive. We present techniques for finding fix locations, a small set of program locations where fixes can be applied to address all static analysis warnings. We focus on analyses expressible as context-free-language reachability, where a set of fix locations is naturally expressed as a min-cut of the CFL graph. We show, surprisingly, that computing such a CFL min-cut is NP-hard. We then phrase the problem of finding CFL min-cuts as an optimization problem which allows us to trade-off the size of the cut vs. the preservation of computed information. We then show how to solve the optimization problem via a MaxSAT encoding.",
isbn="978-3-319-63390-9"
}

@inproceedings{Reps,
 author = {Reps, Thomas},
 title = {Program Analysis via Graph Reachability},
 booktitle = {Proceedings of the 1997 International Symposium on Logic Programming},
 series = {ILPS '97},
 year = {1997},
 isbn = {0-262-63180-6},
 location = {Port Washington, New York, USA},
 pages = {5--19},
 numpages = {15},
 url = {http://dl.acm.org/citation.cfm?id=271338.271343},
 acmid = {271343},
 publisher = {MIT Press},
 address = {Cambridge, MA, USA},
}

@InProceedings{10.1007/11823230_7,
author="Pratikakis, Polyvios
and Foster, Jeffrey S.
and Hicks, Michael",
editor="Yi, Kwangkeun",
title="Existential Label Flow Inference Via CFL Reachability",
booktitle="Static Analysis",
year="2006",
publisher="Springer Berlin Heidelberg",
address="Berlin, Heidelberg",
pages="88--106",
abstract="In programming languages, existential quantification is useful for describing relationships among members of a structured type. For example, we may have a list in which there exists some mutual exclusion lock l in each list element such that l protects the data stored in that element. With this information, a static analysis can reason about the relationship between locks and locations in the list even when the precise identity of the lock and/or location is unknown. To facilitate the construction of such static analyses, this paper presents a context-sensitive label flow analysis algorithm with support for existential quantification. Label flow analysis is a core part of many static analysis systems. Following Rehof et al, we use context-free language (CFL) reachability to develop an efficient O(n3) label flow inference algorithm. We prove the algorithm sound by reducing its derivations to those in a system based on polymorphically-constrained types, in the style of Mossin. We have implemented a variant of our analysis as part of a data race detection tool for C programs.",
isbn="978-3-540-37758-0"
}

@inproceedings{Zheng,
 author = {Zheng, Xin and Rugina, Radu},
 title = {Demand-driven Alias Analysis for C},
 booktitle = {Proceedings of the 35th Annual ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages},
 series = {POPL '08},
 year = {2008},
 isbn = {978-1-59593-689-9},
 location = {San Francisco, California, USA},
 pages = {197--208},
 numpages = {12},
 url = {http://doi.acm.org/10.1145/1328438.1328464},
 doi = {10.1145/1328438.1328464},
 acmid = {1328464},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {CFL reachability, alias analysis, demand-driven analysis, memory disambiguation, pointer analysis},
}

@inproceedings{JavaCFL,
 author = {Yan, Dacong and Xu, Guoqing and Rountev, Atanas},
 title = {Demand-driven Context-sensitive Alias Analysis for Java},
 booktitle = {Proceedings of the 2011 International Symposium on Software Testing and Analysis},
 series = {ISSTA '11},
 year = {2011},
 isbn = {978-1-4503-0562-4},
 location = {Toronto, Ontario, Canada},
 pages = {155--165},
 numpages = {11},
 url = {http://doi.acm.org/10.1145/2001420.2001440},
 doi = {10.1145/2001420.2001440},
 acmid = {2001440},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {alias analysis, context sensitivity, demand-driven},
}

@inproceedings{Huang:2015:SPT:2771783.2771803,
 author = {Huang, Wei and Dong, Yao and Milanova, Ana and Dolby, Julian},
 title = {Scalable and Precise Taint Analysis for Android},
 booktitle = {Proceedings of the 2015 International Symposium on Software Testing and Analysis},
 series = {ISSTA 2015},
 year = {2015},
 isbn = {978-1-4503-3620-8},
 location = {Baltimore, MD, USA},
 pages = {106--117},
 numpages = {12},
 url = {http://doi.acm.org/10.1145/2771783.2771803},
 doi = {10.1145/2771783.2771803},
 acmid = {2771803},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {Android, CFL-reachability, Taint analysis, information flow},
}

@InProceedings{10.1007/978-3-662-54434-1_33,
author="Tang, Hao
and Wang, Di
and Xiong, Yingfei
and Zhang, Lingming
and Wang, Xiaoyin
and Zhang, Lu",
editor="Yang, Hongseok",
title="Conditional Dyck-CFL Reachability Analysis for Complete and Efficient Library Summarization",
booktitle="Programming Languages and Systems",
year="2017",
publisher="Springer Berlin Heidelberg",
address="Berlin, Heidelberg",
pages="880--908",
abstract="Library summarization is an effective way to accelerate the analysis of client code. However, information about the client is unknown at the library summarization, preventing complete summarization of the library. An existing approach utilizes tree-adjoining languages (TALs) to provide conditional summaries, enabling the summarization of a library under certain premises. However, the use of TAL imposes several problems, preventing a complete summarization of a library and reducing the efficiency of the analysis.",
isbn="978-3-662-54434-1"
}

@article{Wang:2017:GSD:3093315.3037744,
 author = {Wang, Kai and Hussain, Aftab and Zuo, Zhiqiang and Xu, Guoqing and Amiri Sani, Ardalan},
 title = {Graspan: A Single-machine Disk-based Graph System for Interprocedural Static Analyses of Large-scale Systems Code},
 journal = {SIGOPS Oper. Syst. Rev.},
 issue_date = {June 2017},
 volume = {51},
 number = {2},
 month = apr,
 year = {2017},
 issn = {0163-5980},
 pages = {389--404},
 numpages = {16},
 url = {http://doi.acm.org/10.1145/3093315.3037744},
 doi = {10.1145/3093315.3037744},
 acmid = {3037744},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {disk-based systems, graph processing, static analysis},
}
