Hello. I'm Semyon 

I'm phd student of saint petersburg state university and researcher of JetBrains language engineering laboratory.

I want to tell you about our research in the field of string-embedded languages processing.

One can use direct eixecution of character strings to embed one programming language into another. The most popular example is SQL statements embedded to C++ or Java, and dynamic SQL. But any other language can by embedded. For example we can use JavaScript embedded into Java.
 
The main problem of this approach is that such dynamically generated expression is an expression in programming language and we want to process it like a source code. But for tools like IDE embedded expressions are just strings. So standard tools cannot statically check errors, refactor or translate it.
 
There are some tools and approaches to statically process string-embedded languages. The main theoretical result is a research of Kyung-Goo Doh group. They propose to use standart LR technique with attributed grammars to analyze compact representation of dynamically generated expressions values set. We use their idea. An approximation that we use is a graph which represents finite state automata which produce passible values of expression. So we can use semantics action to process string embedded languages but naive implementation can not be applied to real world systems because of space and time issues.

Here you can see an example of dynamic SQL. It is one of examples of string-embedded languages. EXECUTE command is a hotspot for analyzing. Two different queries could be executed depending on the condition. We can enumerate them all. But for complex code the number of values may be huge. For example the system we had to analyze contains 10 000 lines procedure where approximately 9000 lines are generate single expression. So, we need some compact representation. We use graph representation of finite automata. Automata for this code is presented. Aproximation constraction is a separated  question. We use constant propagation based algorithm.
 
We try to use this approach to migrate big information system from Transact SQL to PL SQL. This system contains a big number of complex dynamic SQL queries. And naive implementation of Doh algorithm can not process it.
 
Our solution is runtime filtration of parsing results. We need to calculate new values for all query-building variables to automatization of translation. So we can reduce a size of forest and corresponded parser states in each vertices with more then one incoming edges. Look at this example. Full parsing forest for dynamically generated expression contains 4 trees. But subsets of trees number 1 and 4 or 2 and 3 contain all variables which are used in query building. So the vertice 4 we can choose only 2 parser states and 2 corresponded tree to process.
 
So, for each vertice with more then ome incoming edges we should choose only unique parser states. And resulting parse forest should use all query-building variables. Why we can not filter input graph statically on start? We cannot do it because we cannot predict correctnes of paths. If any of selected paths produce incorrect expression then variables will be lost.
 
Let me explain the problem of static paths selection. Consider this input gaph and let select 2 paths: one is red and the other is blue. As you can see all of this paths are incorrect: there are brackets with no pairs. So after parsing is completed we get empty parsing forest. As a result we cannot do any transformation. So the choice of paths were incorrect. But if we choose another pair of paths we can get correct trees for both of them. As you can see, static filtering is inappropriate and results filtering must be done in runtime.
 
 As a result, we implement described changes and get improved algorithm for semantics calculation for string-embedded languages. Also we concude that it is possible to use GLR ideas and data structures such as graph structured stack or shared packed parser forest to improve abstract parsing and abstract translation algorithm. Now we are working on it.
 
 Thank you. Do you have any question?
