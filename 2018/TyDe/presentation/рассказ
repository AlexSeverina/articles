Здравствутйе. Меня зовут Семён, я из лаборатории языковых инструментов. Сегодня я хочу ассказать 
вам про работу моего студента, который, к сожалению не смог приехать из-за проблем с визой. И так, сейчас я расскажу о том, как мы пытались !!!

Краткий экскурс. ГПГПУ 

Изначально, ГПГПУ применялись для научных расчётов, но постепенно они стали востребованы и в прикладных решениях, особенно если учесть, что многие задачи, которые когда-то были научными, стали прикладными, например в биологии, химии, различные моделирования соединений.

Возникла проблема с тем, что ГПГПУ низкоуровненвые, а приладения мы хотим писать на высокоуровневых платформах и соответствующих языках. Вопросы интеграции.

Раз возникла задача, стали предприниматься попытки её решения. Различный уровень. От "низкоуровневых драйверов" до трансляции высокоуровневого языка в ГПГПУ. Последнее хорошо всем, кроме того, что не очень понятно, как переиспользовать существующий код.

Генеративные подходы (для много чего академического сюда попадёт)

Надо пример с проблемой. Мол, да, вот так можно, но легко ошибиться.

Плюс про то, что для многих надо руками писать порты типа Алеи.

Как это можно обойти? Для этого мы решили использовать провайдеры типов. Что такое провайдеры типов. Существуют примеры, очень близкие нашему случаю. Например R-провыйдер,COM-provider, ini-provider. который делает доступными в F# методы из R-пакетов. Приер кода.

Одно из сущетвующих решений в области -- Brahma.FSharp. Это транслятор F# quotations в OpenCL C и необходимый для выполнения сгенриованного кода рантайм. И мы решили добавить в Браму возможность использовать существующий код на основе провайдера типов. При этом хотелось сохранить типобезопасность, собственно, как обычно.

Архитектура такая-то. Парсим, конечно, не всё и т.д. Типы мапим не все ....

Пример использования.

Ограничения.

Дальнейшее развитие.


